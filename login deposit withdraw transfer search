#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct{
char username[50];
char password[50];
}users;
typedef struct {
    char accountNumber[20];
    char name[50];
    char email[50];
    float balance;
    char mobile[15];
    char dateOpened[20];
} accounts;

void Menu() {
    printf("...Main Menu...\n");
    printf("1. ADD\n");
    printf("2. DELETE\n");
    printf("3. SEARCH\n");
    printf("4. ADVANCED SEARCH\n");
    printf("5. WITHDRAW\n");
    printf("6. DEPOSIT\n");
    printf("7. TRANSFER\n");
    printf("8. PRINT\n");
    printf("9. QUIT\n");
    printf("10. REPORT\n");
}
int login(char *username, char *password) {
    FILE *file = fopen("users.txt", "r");
    if (file == NULL) {
        printf("Error opening file.\n");
        return 0;}

    users stored;
    int isValid = 0;

    // Read and validate user details
    //fscanf successfully reads and assigns values to both variables, it returns 2,
    //indicating that it matched two items

      while (fscanf(file, "%s %s", stored.username, stored.password) == 2) {
        if (strcmp(username, stored.username) == 0 && strcmp(password, stored.password) == 0) {
            isValid = 1;
            break;}}
    fclose(file);
    return isValid;}
void AccountDetails(accounts *account) {
    printf("\n");
    printf("Account Number: %s\n", account->accountNumber);
    printf("Name: %s\n", account->name);
    printf("Email: %s\n", account->email);
    printf("Balance: %.2f $\n", account->balance);
    printf("Mobile: %s\n", account->mobile);
    printf("Opened: %s\n", account->dateOpened);
    printf("\n");
}

void advancedSearch(char *keyword) {
    FILE *file = fopen("accounts.txt", "r");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    accounts stored;

    printf("\n");
    printf("Search results:\n");

    while (fscanf(file, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                  stored.accountNumber, stored.name, stored.email,
                  &stored.balance, stored.mobile, stored.dateOpened) == 6) {

        if (strstr(stored.name, keyword) != NULL) {
            AccountDetails(&stored);
        }
    }

    fclose(file);
}

int querysearch(char *accountNumber, accounts *found) {
    FILE *file = fopen("accounts.txt", "r");

    if (file == NULL) {
        printf("Error opening file.\n");
        return 0;
    }

    accounts stored;

    while (fscanf(file, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                  stored.accountNumber, stored.name, stored.email,
                  &stored.balance, stored.mobile, stored.dateOpened) == 6) {

        if (strcmp(stored.accountNumber, accountNumber) == 0) {
            *found = stored;
            fclose(file);
            return 1;
        }
    }

    fclose(file);
    return 0;
}

void deposit(char *accountNumber, float amount) {
    accounts stored, updated;

    if (querysearch(accountNumber, &stored) == 1) {
        stored.balance += amount;

        FILE *readFile = fopen("accounts.txt", "r");
        FILE *writeFile = fopen("temp.txt", "w");

        if (readFile == NULL || writeFile == NULL) {
            printf("Error opening file.\n");
            return;
        }

        while (fscanf(readFile, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                      updated.accountNumber, updated.name, updated.email,
                      &updated.balance, updated.mobile, updated.dateOpened) == 6) {
            if (strcmp(updated.accountNumber, accountNumber) == 0) {
                updated.balance = stored.balance;
            }
            fprintf(writeFile, "%s, %s, %s, %.2f, %s, %s\n",
                    updated.accountNumber, updated.name, updated.email,
                    updated.balance, updated.mobile, updated.dateOpened);
        }

        fclose(readFile);
        fclose(writeFile);

        remove("accounts.txt");
        rename("temp.txt", "accounts.txt");

        printf("...Deposited successfully...\n");
        AccountDetails(&stored);
    } else {
        printf("Account not found.\n");
    }
}

void withdraw(char *accountNumber, float amount) {
    accounts stored, updated;

    if (querysearch(accountNumber, &stored) == 1) {
        if (stored.balance >= amount) {
            stored.balance -= amount;

            FILE *readFile = fopen("accounts.txt", "r");
            FILE *writeFile = fopen("temp.txt", "w");

            if (readFile == NULL || writeFile == NULL) {
                printf("Error opening file.\n");
                return;
            }

            while (fscanf(readFile, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                          updated.accountNumber, updated.name, updated.email,
                          &updated.balance, updated.mobile, updated.dateOpened) == 6) {
                if (strcmp(updated.accountNumber, accountNumber) == 0) {
                    updated.balance = stored.balance;
                }
                fprintf(writeFile, "%s, %s, %s, %.2f, %s, %s\n",
                        updated.accountNumber, updated.name, updated.email,
                        updated.balance, updated.mobile, updated.dateOpened);
            }

            fclose(readFile);
            fclose(writeFile);

            remove("accounts.txt");
            rename("temp.txt", "accounts.txt");

            printf("...Withdrawn successfully...\n");
            AccountDetails(&stored);
        } else {
            printf("Insufficient balance for withdrawal.\n");
        }
    } else {
        printf("Account not found.\n");
    }
}

void transfer(char *fromAccountNumber, char *toAccountNumber, float amount) {
    accounts fromAccount, toAccount;

    if (querysearch(fromAccountNumber, &fromAccount) == 1 &&
        querysearch(toAccountNumber, &toAccount) == 1) {

        if (fromAccount.balance >= amount) {
            fromAccount.balance -= amount;
            toAccount.balance += amount;

            FILE *readFile = fopen("accounts.txt", "r");
            FILE *writeFile = fopen("temp.txt", "w");

            if (readFile == NULL || writeFile == NULL) {
                printf("Error opening file.\n");
                return;
            }

            accounts updated;
            while (fscanf(readFile, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                          updated.accountNumber, updated.name, updated.email,
                          &updated.balance, updated.mobile, updated.dateOpened) == 6) {
                if (strcmp(updated.accountNumber, fromAccountNumber) == 0) {
                    updated.balance = fromAccount.balance;
                } else if (strcmp(updated.accountNumber, toAccountNumber) == 0) {
                    updated.balance = toAccount.balance;
                }
                fprintf(writeFile, "%s, %s, %s, %.2f, %s, %s\n",
                        updated.accountNumber, updated.name, updated.email,
                        updated.balance, updated.mobile, updated.dateOpened);
            }

            fclose(readFile);
            fclose(writeFile);

            remove("accounts.txt");
            rename("temp.txt", "accounts.txt");

            printf("...Transfer completed successfully...\n");
            printf("From Account:\n");
            AccountDetails(&fromAccount);
            printf("To Account:\n");
            AccountDetails(&toAccount);
        } else {
            printf("Insufficient balance for transfer.\n");
        }
    } else {
        printf("One or both accounts not found.\n");
    }
}

void addAccount() {
    FILE *file = fopen("accounts.txt", "a");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    accounts newAccount;

    printf("Enter Account Number: ");
    scanf("%19s", newAccount.accountNumber);
    printf("Enter Name: ");
    scanf("%49s", newAccount.name);
    printf("Enter Email: ");
    scanf("%49s", newAccount.email);
    printf("Enter Balance: ");
    scanf("%f", &newAccount.balance);
    printf("Enter Mobile: ");
    scanf("%14s", newAccount.mobile);
    printf("Enter Date Opened: ");
    scanf("%19s", newAccount.dateOpened);

    fprintf(file, "%s, %s, %s, %.2f, %s, %s\n",
            newAccount.accountNumber, newAccount.name, newAccount.email,
            newAccount.balance, newAccount.mobile, newAccount.dateOpened);

    fclose(file);
    printf("...Account added successfully...\n");
}

void deleteAccount() {
    char accountNumber[20];
    printf("Enter the account number to delete: ");
    scanf("%19s", accountNumber);

    FILE *readFile = fopen("accounts.txt", "r");
    FILE *writeFile = fopen("temp.txt", "w");

    if (readFile == NULL || writeFile == NULL) {
        printf("Error opening file.\n");
        return;
    }

    accounts stored;

    int found = 0;
    while (fscanf(readFile, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                  stored.accountNumber, stored.name, stored.email,
                  &stored.balance, stored.mobile, stored.dateOpened) == 6) {

        if (strcmp(stored.accountNumber, accountNumber) == 0) {
            found = 1;
            printf("Deleted Account:\n");
            AccountDetails(&stored);
        } else {
            fprintf(writeFile, "%s, %s, %s, %.2f, %s, %s\n",
                    stored.accountNumber, stored.name, stored.email,
                    stored.balance, stored.mobile, stored.dateOpened);
        }
    }

    fclose(readFile);
    fclose(writeFile);

    if (!found) {
        printf("Account not found.\n");
        remove("temp.txt");
    } else {
        remove("accounts.txt");
        rename("temp.txt", "accounts.txt");
        printf("...Account deleted successfully...\n");
    }
}

void printAccounts() {
    FILE *file = fopen("accounts.txt", "r");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    accounts stored;

    printf("\n");

    printf("All accounts:\n");

    while (fscanf(file, " %19[^,], %49[^,], %49[^,], %f, %14[^,], %19[^\n]",
                  stored.accountNumber, stored.name, stored.email,
                  &stored.balance, stored.mobile, stored.dateOpened) == 6) {
        AccountDetails(&stored);
    }

    fclose(file);
}

void quit() {
    printf("Goodbye!\n");
}

int main() {
    char entered_username[50];
    char entered_password[50];
    int choice;
    float amount;
    char accountnumber[20];
    accounts found;
 do {
        printf("HELLO\n");
        printf("Enter username:");
        scanf("%s", entered_username);
        printf("Enter password:");
        scanf("%s", entered_password);
        if (login(entered_username, entered_password)) {
            printf(".........LOADING.........\n");
            break;
        } else {
            printf("Wrong, try again\n");
        }
    } while (1); // Loop until valid login
    do {
        Menu();
        printf("\n");
        printf("Choose your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addAccount();
                break;
            case 2:
                deleteAccount();
                break;
            case 3:
                printf("Enter account number: ");
                scanf("%19s", accountnumber);
                if (querysearch(accountnumber, &found) == 1) {
                    printf("Account found:\n");
                    AccountDetails(&found);
                } else {
                    printf("Account not found.\n");
                }
                break;
            case 4:
                printf("Enter keyword: ");
                char keyword[50];
                scanf("%49s", keyword);
                advancedSearch(keyword);
                break;
            case 5:
                printf("Enter account number: ");
                scanf("%19s", accountnumber);
                printf("Enter withdraw amount: ");
                scanf("%f", &amount);
                withdraw(accountnumber, amount);
                break;
            case 6:
                printf("Enter account number: ");
                scanf("%19s", accountnumber);
                printf("Enter deposit amount: ");
                scanf("%f", &amount);
                deposit(accountnumber, amount);
                break;
            case 7:
                printf("Enter the account number to transfer from: ");
                char fromAccount[20];
                scanf("%19s", fromAccount);

                printf("Enter the account number to transfer to: ");
                char toAccount[20];
                scanf("%19s", toAccount);

                printf("Enter the amount to transfer: ");
                scanf("%f", &amount);

                transfer(fromAccount, toAccount, amount);
                break;
            case 8:
                printAccounts();
                break;
            case 9:
                quit();
                break;
            case 10:
                // Implement REPORT function
                break;
            default:
                printf("Invalid choice. Please choose again.\n");
        }

    } while (choice != 9);

    return 0;
}
